/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection ES6UnusedImports
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-resolver' {
  export type ParamParserCustom = never
}

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<
      '/',
      '/',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/[...all]': RouteRecordInfo<
      '/[...all]',
      '/:all(.*)',
      { all: ParamValue<true> },
      { all: ParamValue<false> },
      | never
    >,
    '/about': RouteRecordInfo<
      '/about',
      '/about',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/admin/': RouteRecordInfo<
      '/admin/',
      '/admin',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/admin/bookings': RouteRecordInfo<
      '/admin/bookings',
      '/admin/bookings',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/admin/coupons': RouteRecordInfo<
      '/admin/coupons',
      '/admin/coupons',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/blog': RouteRecordInfo<
      '/blog',
      '/blog',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/bookings-auto': RouteRecordInfo<
      '/bookings-auto',
      '/bookings-auto',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/bookings-data': RouteRecordInfo<
      '/bookings-data',
      '/bookings-data',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/counter': RouteRecordInfo<
      '/counter',
      '/counter',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/error': RouteRecordInfo<
      '/error',
      '/error',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/forbidden': RouteRecordInfo<
      '/forbidden',
      '/forbidden',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/': RouteRecordInfo<
      '/posts/',
      '/posts',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/posts/[slug]': RouteRecordInfo<
      '/posts/[slug]',
      '/posts/:slug',
      { slug: ParamValue<true> },
      { slug: ParamValue<false> },
      | never
    >,
    '/posts/author/[name]': RouteRecordInfo<
      '/posts/author/[name]',
      '/posts/author/:name',
      { name: ParamValue<true> },
      { name: ParamValue<false> },
      | never
    >,
    '/posts/tagged/[tag]': RouteRecordInfo<
      '/posts/tagged/[tag]',
      '/posts/tagged/:tag',
      { tag: ParamValue<true> },
      { tag: ParamValue<false> },
      | never
    >,
    '/posts/year/[year]': RouteRecordInfo<
      '/posts/year/[year]',
      '/posts/year/:year',
      { year: ParamValue<true> },
      { year: ParamValue<false> },
      | never
    >,
    '/privacy': RouteRecordInfo<
      '/privacy',
      '/privacy',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/profile': RouteRecordInfo<
      '/profile',
      '/profile',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/signin': RouteRecordInfo<
      '/signin',
      '/signin',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/signup': RouteRecordInfo<
      '/signup',
      '/signup',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/signup-confirm': RouteRecordInfo<
      '/signup-confirm',
      '/signup-confirm',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/todomvc': RouteRecordInfo<
      '/todomvc',
      '/todomvc',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/videos': RouteRecordInfo<
      '/videos',
      '/videos',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/weather': RouteRecordInfo<
      '/weather',
      '/weather',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
    '/whatsnew': RouteRecordInfo<
      '/whatsnew',
      '/whatsnew',
      Record<never, never>,
      Record<never, never>,
      | never
    >,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes:
        | '/'
      views:
        | never
    }
    'src/pages/[...all].vue': {
      routes:
        | '/[...all]'
      views:
        | never
    }
    'src/pages/about.md': {
      routes:
        | '/about'
      views:
        | never
    }
    'src/pages/admin/index.vue': {
      routes:
        | '/admin/'
      views:
        | never
    }
    'src/pages/admin/bookings.vue': {
      routes:
        | '/admin/bookings'
      views:
        | never
    }
    'src/pages/admin/coupons.vue': {
      routes:
        | '/admin/coupons'
      views:
        | never
    }
    'src/pages/blog.vue': {
      routes:
        | '/blog'
      views:
        | never
    }
    'src/pages/bookings-auto.vue': {
      routes:
        | '/bookings-auto'
      views:
        | never
    }
    'src/pages/bookings-data.vue': {
      routes:
        | '/bookings-data'
      views:
        | never
    }
    'src/pages/counter.vue': {
      routes:
        | '/counter'
      views:
        | never
    }
    'src/pages/error.vue': {
      routes:
        | '/error'
      views:
        | never
    }
    'src/pages/forbidden.vue': {
      routes:
        | '/forbidden'
      views:
        | never
    }
    'src/pages/posts/index.vue': {
      routes:
        | '/posts/'
      views:
        | never
    }
    'src/pages/posts/[slug].vue': {
      routes:
        | '/posts/[slug]'
      views:
        | never
    }
    'src/pages/posts/author/[name].vue': {
      routes:
        | '/posts/author/[name]'
      views:
        | never
    }
    'src/pages/posts/tagged/[tag].vue': {
      routes:
        | '/posts/tagged/[tag]'
      views:
        | never
    }
    'src/pages/posts/year/[year].vue': {
      routes:
        | '/posts/year/[year]'
      views:
        | never
    }
    'src/pages/privacy.md': {
      routes:
        | '/privacy'
      views:
        | never
    }
    'src/pages/profile.vue': {
      routes:
        | '/profile'
      views:
        | never
    }
    'src/pages/signin.vue': {
      routes:
        | '/signin'
      views:
        | never
    }
    'src/pages/signup.vue': {
      routes:
        | '/signup'
      views:
        | never
    }
    'src/pages/signup-confirm.vue': {
      routes:
        | '/signup-confirm'
      views:
        | never
    }
    'src/pages/todomvc.vue': {
      routes:
        | '/todomvc'
      views:
        | never
    }
    'src/pages/videos.vue': {
      routes:
        | '/videos'
      views:
        | never
    }
    'src/pages/weather.vue': {
      routes:
        | '/weather'
      views:
        | never
    }
    'src/pages/whatsnew.vue': {
      routes:
        | '/whatsnew'
      views:
        | never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the \`sfc-typed-router\` Volar plugin to automatically type \`useRoute()\`.
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
